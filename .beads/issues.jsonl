{"id":"pg_search-031e","content_hash":"1eef3b676302539fd74d314cdf6bf03bd6af9157c1958db11545cdb840fec7e7","title":"Eliminate Arel.sql cop-outs with proper Arel constructs","description":"Replace remaining Arel.sql calls with proper Arel table references, column references, and SQL constructs. Current instances: rank_column references, order_within_rank, PostgreSQL cast expressions, empty string literals.","notes":"Successfully eliminated unnecessary Arel.sql calls:\n- Empty string literals now use Arel::Nodes::Quoted.new('')  \n- Default ordering uses proper Arel table references\n- Distinguished necessary Arel.sql (user input, subquery aliases, PostgreSQL casts) from unnecessary ones\n- All 95 tests passing\n\nRemaining Arel.sql calls are justified:\n- User-provided SQL expressions (config.order_within_rank, ranking expressions)\n- Dynamic subquery table aliases (#{rank_table_alias}.rank)\n- PostgreSQL-specific syntax (::text casts, tsearch functions)\n- Complex feature-specific SQL in TSearch/Trigram/DMetaphone","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-31T16:38:01.315548-05:00","updated_at":"2025-10-31T16:41:08.402088-05:00","closed_at":"2025-10-31T16:41:08.402088-05:00","dependencies":[{"issue_id":"pg_search-031e","depends_on_id":"pg_search-951c","type":"discovered-from","created_at":"2025-10-31T16:38:01.327906-05:00","created_by":"grant"}]}
{"id":"pg_search-13ad","content_hash":"0f1f8c589a6ca82d7784f3467070bf6f1b02f7995c824de5fd278357d9011130","title":"Eliminate .to_sql in Highlight methods","description":"Return Arel nodes from highlight methods instead of SQL strings for better composability. Currently tsearch.highlight.to_sql returns strings that get wrapped in Arel.sql() in WithPgSearchHighlight module.","design":"Technical approach:\n- Modify TSearch highlight method to return Arel nodes instead of calling .to_sql\n- Update WithPgSearchHighlight module to work with Arel nodes directly\n- Remove unnecessary .to_sql conversions and Arel.sql wrapping\n- Ensure ts_headline function calls are built using proper Arel constructs\n- Maintain all highlight functionality and options\n\nFiles to modify:\n- lib/pg_search/features/tsearch.rb (highlight method)\n- lib/pg_search/scope_options.rb (WithPgSearchHighlight module)","acceptance_criteria":"- [ ] TSearch highlight method returns Arel nodes instead of SQL strings\n- [ ] WithPgSearchHighlight uses Arel nodes directly without Arel.sql wrapper\n- [ ] All highlight functionality tests pass\n- [ ] Generated SQL remains functionally identical\n- [ ] ts_headline options continue to work correctly","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-31T17:10:03.510666-05:00","updated_at":"2025-10-31T17:43:34.838807-05:00","closed_at":"2025-10-31T17:43:34.838807-05:00"}
{"id":"pg_search-2a2a","content_hash":"11be4898061955b1080a271a6b41bb0ddc8867d3f44658f802ea0018d44d1477","title":"Create Arel helper methods for PostgreSQL functions","description":"Create reusable helper methods for common PostgreSQL-specific Arel patterns to reduce code duplication and provide consistent approaches across features.","design":"Technical approach:\n- Create module with PostgreSQL-specific Arel helpers for common patterns\n- Helper methods for PostgreSQL type casting (::text, ::tsvector, etc.)\n- Helper methods for PostgreSQL functions (string_agg, coalesce, ts_rank, etc.)\n- Include helpers in relevant classes (Features, Configuration classes)\n- Provide clear guidelines on when to use helpers vs Arel.sql\n- Document usage patterns and best practices\n\nFiles to create/modify:\n- lib/pg_search/arel_helpers.rb (new module with PostgreSQL helpers)\n- Include in relevant feature and configuration classes\n- Update existing code to use helpers where appropriate","acceptance_criteria":"- [ ] Create module with PostgreSQL-specific Arel helper methods\n- [ ] Helper methods for PostgreSQL type casting (::text, ::tsvector, etc.)\n- [ ] Helper methods for PostgreSQL functions (string_agg, coalesce, ts_rank, etc.)\n- [ ] Include helpers in relevant classes across the codebase\n- [ ] Documentation for using helpers vs Arel.sql\n- [ ] Consistent patterns across all features and configuration classes","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-31T17:10:11.67484-05:00","updated_at":"2025-10-31T17:10:11.67484-05:00","dependencies":[{"issue_id":"pg_search-2a2a","depends_on_id":"pg_search-ce60","type":"related","created_at":"2025-10-31T17:10:25.796369-05:00","created_by":"grant"}]}
{"id":"pg_search-4aea","content_hash":"70b9031843984f746fea251556009bc459167f1ed2c8d73fc8991a69769a3453","title":"Fix undercover coverage tool compatibility with jj","description":"The undercover coverage tool fails with 'Rugged::FilesystemError: file changed before we could read it' when using jj instead of git. Need to either configure undercover to work with jj or find alternative coverage checking approach.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-31T16:36:30.253929-05:00","updated_at":"2025-10-31T16:36:30.253929-05:00","dependencies":[{"issue_id":"pg_search-4aea","depends_on_id":"pg_search-951c","type":"discovered-from","created_at":"2025-10-31T16:36:30.255099-05:00","created_by":"grant"}]}
{"id":"pg_search-59dd","content_hash":"46b20b2a0b32109e3619a5e717c04a244cb6ece9ccd0d113957c22cc706977ca","title":"Reduce Arel.sql in Feature rank methods","description":"Make feature rank methods return Arel expressions instead of SQL strings for better composability. Currently feature.rank.to_sql returns strings that get composed via string replacement in scope_options.rb rank method.","design":"Technical approach:\n- Modify each feature's rank method to return Arel function nodes instead of SQL strings\n- Update scope_options.rb rank method to compose Arel expressions instead of string gsub replacement\n- Use Arel's expression composition methods for rank calculations\n- Keep Arel.sql as escape hatch for user-provided ranking SQL (config.ranking_sql)\n- Ensure feature rank calculations remain mathematically equivalent\n\nFiles to modify:\n- lib/pg_search/features/tsearch.rb (rank method)\n- lib/pg_search/features/trigram.rb (rank method) \n- lib/pg_search/features/dmetaphone.rb (rank method)\n- lib/pg_search/scope_options.rb (rank method for composition)","acceptance_criteria":"- [ ] Feature .rank methods return Arel nodes instead of SQL strings\n- [ ] scope_options.rb rank method composes Arel expressions instead of string replacement\n- [ ] Support for user-provided :ranked_by SQL continues to work (may still need Arel.sql)\n- [ ] All ranking functionality tests pass\n- [ ] Performance characteristics remain equivalent  \n- [ ] Generated SQL produces same ranking results","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-31T17:09:56.481734-05:00","updated_at":"2025-10-31T17:39:11.555974-05:00","closed_at":"2025-10-31T17:39:11.555974-05:00","dependencies":[{"issue_id":"pg_search-59dd","depends_on_id":"pg_search-d51a","type":"related","created_at":"2025-10-31T17:10:29.135546-05:00","created_by":"grant"}]}
{"id":"pg_search-6156","content_hash":"c338f0e34fe9767c33f8873a4f3edac5ff2e52ef582c28d3180fb313aa125ef9","title":"Eliminate Arel.sql in TSearch query construction","description":"Replace Arel.sql() wrappers in tsquery_for_term and related methods with proper Arel node construction. Currently using Arel.sql(normalize(connection.quote(sanitized_term))) which should be built using Arel::Nodes::Quoted and proper composition.","design":"Technical approach:\n- Replace Arel.sql() wrapper around normalized/quoted terms with Arel::Nodes::Quoted.new()\n- Build tsquery expressions using InfixOperation and NamedFunction nodes exclusively  \n- Make tsquery_expression return pure Arel nodes instead of mixed types\n- Update tsquery_for_term to return Arel function nodes instead of SQL strings\n\nFiles to modify:\n- lib/pg_search/features/tsearch.rb (tsquery_for_term, tsquery_expression methods)","acceptance_criteria":"- [ ] tsquery_for_term method works entirely with Arel nodes\n- [ ] Remove Arel.sql() wrapper around normalized/quoted terms  \n- [ ] tsquery_expression returns Arel nodes, not mixed string/node types\n- [ ] All tsearch functionality tests continue to pass\n- [ ] Generated SQL remains functionally identical\n- [ ] No performance regression in query building","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-31T17:09:19.871864-05:00","updated_at":"2025-10-31T17:17:39.228416-05:00","closed_at":"2025-10-31T17:17:39.228416-05:00"}
{"id":"pg_search-6e20","content_hash":"1b44765f1cbca033f0da32fe976a25dba8487e94b626844030550fc15f370446","title":"Refactor subquery JOINs to use proper Arel constructs","description":"Replace manual JOIN string construction and table alias references with proper Arel subquery JOINs. Current areas: rank_join method, subquery table alias references in apply() and with_pg_search_rank methods.","notes":"Successfully refactored subquery JOINs to use proper Arel constructs:\n\n✅ Eliminated Arel.sql from JOIN conditions - now using primary_key_column.eq(subquery_id_column)\n✅ Replaced string interpolation table alias references with Arel::Table.new(rank_table_alias) \n✅ Used proper Arel column references for rank_table[:rank] and rank_table[:pg_search_id]\n✅ Maintained correct SQL generation while gaining type safety\n\nAll 95 tests passing. Remaining Arel.sql calls are justified:\n- User-provided order_within_rank expressions \n- Complex PostgreSQL-specific rank() and highlight() functions\n- Feature-specific tsearch/trigram/dmetaphone SQL","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-31T16:42:00.922988-05:00","updated_at":"2025-10-31T16:43:44.756236-05:00","closed_at":"2025-10-31T16:43:44.756236-05:00","dependencies":[{"issue_id":"pg_search-6e20","depends_on_id":"pg_search-031e","type":"discovered-from","created_at":"2025-10-31T16:42:00.924312-05:00","created_by":"grant"}]}
{"id":"pg_search-7ec1","content_hash":"a3d45df5d74209aad1514f64b3a0b71bdcc82e6125a57593e0150c644760a506","title":"Eliminate arel_wrap anti-pattern","description":"","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-31T17:29:19.034298-05:00","updated_at":"2025-10-31T17:33:46.303866-05:00","closed_at":"2025-10-31T17:33:46.303866-05:00"}
{"id":"pg_search-8686","content_hash":"c4eb85b9a659f37ade567b7dee5592398be1e89da6bc003634a9c16dd82a3c05","title":"Eliminate Arel.sql in Association SELECT building","description":"Replace Arel.sql() in Association select methods with proper Arel column references and type casting. Currently building expressions like Arel.sql(\"#{column.full_name}::text\") which should use model.arel_table references.","design":"Technical approach:\n- Replace Arel.sql(\"#{column.full_name}::text\") with proper Arel column + type casting\n- Use model.arel_table[column_name] for base column references where possible\n- Handle foreign column references appropriately for cross-table scenarios\n- Apply consistent type casting pattern from Column type casting story\n- Ensure both singular and multiple association select methods work\n\nFiles to modify:\n- lib/pg_search/configuration/association.rb (selects_for_singular_association, selects_for_multiple_association)\n- May need updates to relation method for proper column handling","acceptance_criteria":"- [ ] Replace Arel.sql() with proper Arel column references and type casting\n- [ ] Use model.arel_table[column_name] for base column references where possible  \n- [ ] Handle foreign column references appropriately for cross-table scenarios\n- [ ] Apply consistent type casting pattern \n- [ ] Association tests continue to pass\n- [ ] Integration tests with associations continue to pass","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-31T17:09:46.549674-05:00","updated_at":"2025-10-31T17:36:41.523055-05:00","closed_at":"2025-10-31T17:36:41.523055-05:00","dependencies":[{"issue_id":"pg_search-8686","depends_on_id":"pg_search-ce60","type":"blocks","created_at":"2025-10-31T17:10:22.474215-05:00","created_by":"grant"}]}
{"id":"pg_search-951c","content_hash":"7e117d8357e6b233281249ddc3a9fcf4e167ab070591fdadcdad6bd249bf08bd","title":"replace SQL string interpolation with Arel calls","description":"","notes":"Core Arel conversion work complete in scope_options.rb and configuration/column.rb. Tests passing (95 examples, 0 failures). Main blocker: coverage check fails with Rugged::FilesystemError due to jj/git interaction. Need to resolve coverage tool compatibility or skip coverage check for this PR.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-31T16:18:54.494314-05:00","updated_at":"2025-10-31T16:37:21.554101-05:00","closed_at":"2025-10-31T16:37:21.554101-05:00"}
{"id":"pg_search-ce60","content_hash":"79aae7325a0ef23f03e07e7f47b5e4a0005ad24db9d44f78288b94531a994d38","title":"Eliminate Arel.sql in Column type casting","description":"Replace Arel.sql() with proper PostgreSQL type casting in Column#to_sql method. Currently using Arel.sql(\"(#{expression})::text\") which should use proper Arel type casting constructs.","design":"Technical approach:\n- Research Arel's native PostgreSQL type casting capabilities\n- Replace Arel.sql(\"(#{expression})::text\") with proper Arel constructs\n- Use Arel::Nodes::NamedFunction.new(\"CAST\", [column_expr, Arel.sql(\"text\")]) if needed\n- Or create consistent helper method for PostgreSQL type casting across codebase\n- Ensure coalesce function continues to work with new approach\n\nFiles to modify:\n- lib/pg_search/configuration/column.rb (to_sql method)\n- Consider creating shared PostgreSQL type casting helpers","acceptance_criteria":"- [ ] Replace Arel.sql() in column type casting with proper Arel constructs\n- [ ] Investigate and use Arel's native PostgreSQL ::text casting if available\n- [ ] Create consistent pattern for type casting across codebase\n- [ ] All column functionality tests continue to pass\n- [ ] Generated SQL remains functionally identical","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-31T17:09:38.369525-05:00","updated_at":"2025-10-31T17:27:52.426983-05:00","closed_at":"2025-10-31T17:27:52.426983-05:00"}
{"id":"pg_search-d51a","content_hash":"f9db021ac04945e538a56561354fec681945c24ef91cadeaec3c15408549d1fb","title":"Eliminate .to_sql in TSearch function pipeline","description":"Replace .to_sql calls in TSearch rank and column methods with Arel node returns. Methods like tsearch_rank() and column_to_tsvector() currently return SQL strings but should return Arel nodes for better composability.","design":"Technical approach:\n- Change tsearch_rank to return Arel::Nodes::NamedFunction instead of .to_sql string\n- Change column_to_tsvector to return Arel nodes instead of SQL strings  \n- Update tsdocument method to work with array of Arel nodes instead of strings\n- Modify consuming code in scope_options.rb to handle Arel nodes appropriately\n- Use Arel InfixOperation for || concatenation instead of string joins\n\nFiles to modify:\n- lib/pg_search/features/tsearch.rb (tsearch_rank, column_to_tsvector, tsdocument methods)\n- lib/pg_search/scope_options.rb (rank method to handle Arel nodes from features)","acceptance_criteria":"- [ ] tsearch_rank returns Arel::Nodes::NamedFunction instead of SQL string\n- [ ] column_to_tsvector returns Arel nodes instead of SQL strings\n- [ ] tsdocument method works with array of Arel nodes instead of strings\n- [ ] Update consuming code to handle Arel nodes appropriately  \n- [ ] All tsearch functionality tests pass\n- [ ] Generated SQL remains functionally identical","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-31T17:09:29.26494-05:00","updated_at":"2025-10-31T17:22:13.281687-05:00","closed_at":"2025-10-31T17:22:13.281687-05:00"}
